/**
  ******************************************************************************
  * @file		chronoamperometry.c
  * @brief		Gestión de la cronoamperometría.
  * @author		Albert Álvarez Carulla
  * @copyright	Copyright 2020 Albert Álvarez Carulla. All rights reserved.
  ******************************************************************************
  */


#include "components/chronoamperometry.h"
#include "components/dac.h"
#include "components/timers.h"
#include "components/adc.h"
#include "components/masb_comm_s.h"
#include "main.h"

struct CA_Configuration_S caConfiguration;
extern TIM_HandleTypeDef htim2;
extern struct Data_S data;

uint32_t Measures;


void CA_start(struct CA_Configuration_S caConfiguration){ // iniciamos la cronoamperometria

	double Vcell=1.65-caConfiguration.eDC; // definimos el potencial de inicio que el usuario introduce

	//Write_DAC(Vcell); // fijamos esta tensión con el DAC

	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET); /// cerramos el relé

	Sampling_Period(); // iniciamos el timer

	uint8_t Measure_number=0; // creamos un indice para poder calcular el numero de medidas que vamos haciendo
						// lo usaremos de referencia para saber el tiempo transcurrido

	Measures=((caConfiguration.measurementTime)*1000/(caConfiguration.samplingPeriodMs)); // calculamos el total de medidas que corresponden al sampling period

	while(wait==FALSE){ // si no se ha completado el periodo no hagas nada

	}

	while(Measure_number<Measures){ // mientras no se hayan realizado todas las medidas

		while (wait==TRUE){ // si ha pasado el periodo

			Measure_number++; // cada vez que hacemos una medida incrementamos el indice

			struct Data_S data;

			// mandamos los datos que el host pide
			data.point=Measure_number; // el numero de medida
			data.timeMs=Measure_number*caConfiguration.samplingPeriodMs; // el tiempo transcurrido
			data.voltage=(1.65-ADC_v())*2; // el voltaje
			data.current=((ADC_i()-1.65)*2)/10000; // la corriente

			MASB_COMM_S_sendData(data); // mandamos los valores

			if (Measure_number==Measures){ // si hemos terminado el ciclo (el numero de medidas es el correspondiente al sampling period
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET); // encendemos el relé
				HAL_TIM_Base_Stop_IT(&htim2); // paramos el timer
			}
		}
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) { // callback del timer
	wait = TRUE; // creamos una bandera, cuando el periodo se ha completado la variable wait pasa a true
}


