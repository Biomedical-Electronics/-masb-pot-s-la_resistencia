/**
  ******************************************************************************
  * @file		cyclic_voltammetry.c
  * @brief		Gestión de la voltammetría cíclica.
  * @author		Albert Álvarez Carulla
  * @copyright	Copyright 2020 Albert Álvarez Carulla. All rights reserved.
  ******************************************************************************
  */




#include "components/cyclic_voltammetry.h"
#include "components/dac.h"
#include "components/adc.h"
#include "components/timers.h"
#include "components/masb_comm_s.h"
#include "main.h"

extern struct	CV_Configuration_S	cvConfiguration;
extern struct	Data_S				data;
extern TIM_HandleTypeDef	htim3;

double vObjetivo=0;
uint8_t	number=0;
uint8_t Measure_number=0;
_Bool	increase;

void CV_start(void){ // iniciamos la voltametria ciclica

	Write_DAC(cvConfiguration.eBegin); // mandamos al DAC el valor de Vcell (eBegin del usuario)
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET); // cerramos el relé
	// cuando haya pasado el periodo entre muestras
	uint8_t cycles=cvConfiguration.cycles;

	while (number<cycles){

		wait=FALSE;
		vObjetivo = cvConfiguration.eVertex1; // fijamos la tension objetivo
		Sampling_Period_CV(); // iniciamos el timer

		while (wait==FALSE){

		}


		Measure_number++; // cada vez que hacemos una medida incrementamos el indice

		// mandamos los datos que el host pide
		data.point=Measure_number; // el numero de medida
		data.timeMs=Measure_number*cvConfiguration.eStep/cvConfiguration.scanRate; // el tiempo transcurrido
		data.voltage=ADC_v(void); // canviar struct ADC // el voltaje
		data.current=ADC_i(void); // y la corriente

		MASB_COMM_S_sendData(data); // mandamos los valores


		Vcell=ADC_v(void); // leemos la tension de la celda

		if (vObjetivo==cvConfiguration.eVertex1){
			increase=vObjetivo>cvConfiguration.eBegin;
			if (increase) {
				while(Vcell < vObjectivo) {
					Vcell=Vcell+cvConfiguration.eStep; // sumamos eStep
					if(Vcell>=vObjetivo){ // si la tension en la celda es mayor o igual al objetivo
						vObjetivo=cvConfiguration.eVertex2; // cambiamos la tension objetivo
					}
				}
			} else {
				while(Vcell>vObjetivo){
		    		Vcell=Vcell-cvConfiguration.eStep; // restamos eStep
		    		if(Vcell<=vObjetivo){ // si la tension en la celda es menor o igual al objetivo
		    			vObjetivo=cvConfiguration.eVertex2; // cambiamos la tension objetivo
		    		}
		    	}
		 	 }
		}

		if (vObjetivo==cvConfiguration.eVertex2){
			increase=vObjetivo>cvConfiguration.eVertex1;
			if (increase) {
			    while(Vcell < vObjectivo) {
			    	Vcell=Vcell+cvConfiguration.eStep; // sumamos eStep
			    	if(Vcell>=vObjetivo){ // si la tension en la celda es mayor o igual al objetivo
			    	vObjetivo=cvConfiguration.eBegin; // cambiamos la tension objetivo
			    	}
			    }
			} else {
				while(Vcell>vObjetivo){
			    	Vcell=Vcell-cvConfiguration.eStep; // restamos eStep
			    	if(Vcell<=vObjetivo){ // si la tension en la celda es menor o igual al objetivo
			    	vObjetivo=cvConfiguration.eBegin; // cambiamos la tension objetivo
			    	}
			    }
			 }
		}

		if (vObjetivo==cvConfiguration.eBegin){
			increase=vObjetivo>cvConfiguration.eVertex2;
			if (increase) {
				while(Vcell < vObjectivo) {
					Vcell=Vcell+cvConfiguration.eStep; // sumamos eStep
					if(Vcell>=vObjetivo){ // si la tension en la celda es mayor o igual al objetivo
						 // que se acabe o vuelva a empezar
					}
				}
			} else {
				while(Vcell>vObjetivo){
	    			Vcell=Vcell-cvConfiguration.eStep; // restamos eStep
	    			if(Vcell<=vObjetivo){ // si la tension en la celda es menor o igual al objetivo
	    				// que se acabe o vuelva a empezar
	    			}
			}
		}
	}
		number++;

}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3) {
	wait=TRUE;
}


